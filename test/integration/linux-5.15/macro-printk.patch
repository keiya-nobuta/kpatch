diff --git a/net/ipv4/fib_frontend.c b/net/ipv4/fib_frontend.c
index 9fe13e4f5d08..b76da117c2e9 100644
--- a/net/ipv4/fib_frontend.c
+++ b/net/ipv4/fib_frontend.c
@@ -865,6 +865,7 @@ static int inet_rtm_delroute(struct sk_buff *skb, struct nlmsghdr *nlh,
 	return err;
 }
 
+#include "kpatch-macros.h"
 static int inet_rtm_newroute(struct sk_buff *skb, struct nlmsghdr *nlh,
 			     struct netlink_ext_ack *extack)
 {
@@ -886,6 +887,7 @@ static int inet_rtm_newroute(struct sk_buff *skb, struct nlmsghdr *nlh,
 	err = fib_table_insert(net, tb, &cfg, extack);
 	if (!err && cfg.fc_type == RTN_LOCAL)
 		net->ipv4.fib_has_custom_local_routes = true;
+	KPATCH_PRINTK("[inet_rtm_newroute]: err is %d\n", err);
 errout:
 	return err;
 }
diff --git a/net/ipv4/fib_semantics.c b/net/ipv4/fib_semantics.c
index 3364cb9c67e0..aac0b2f62557 100644
--- a/net/ipv4/fib_semantics.c
+++ b/net/ipv4/fib_semantics.c
@@ -1342,6 +1342,7 @@ static bool fib_valid_prefsrc(struct fib_config *cfg, __be32 fib_prefsrc)
 	return true;
 }
 
+#include "kpatch-macros.h"
 struct fib_info *fib_create_info(struct fib_config *cfg,
 				 struct netlink_ext_ack *extack)
 {
@@ -1393,6 +1394,7 @@ struct fib_info *fib_create_info(struct fib_config *cfg,
 #endif
 
 	err = -ENOBUFS;
+	KPATCH_PRINTK("[fib_create_info]: create error err is %d\n",err);
 	if (fib_info_cnt >= fib_info_hash_size) {
 		unsigned int new_size = fib_info_hash_size << 1;
 		struct hlist_head *new_info_hash;
@@ -1413,6 +1415,7 @@ struct fib_info *fib_create_info(struct fib_config *cfg,
 		if (!fib_info_hash_size)
 			goto failure;
 	}
+	KPATCH_PRINTK("[fib_create_info]: 2 create error err is %d\n",err);
 
 	fi = kzalloc(struct_size(fi, fib_nh, nhs), GFP_KERNEL);
 	if (!fi)
@@ -1426,6 +1429,8 @@ struct fib_info *fib_create_info(struct fib_config *cfg,
 	}
 
 	fib_info_cnt++;
+	KPATCH_PRINTK("[fib_create_info]: 3 create error err is %d\n",err);
+
 	fi->fib_net = net;
 	fi->fib_protocol = cfg->fc_protocol;
 	fi->fib_scope = cfg->fc_scope;
@@ -1449,15 +1454,18 @@ struct fib_info *fib_create_info(struct fib_config *cfg,
 			nexthop_nh->nh_parent = fi;
 		} endfor_nexthops(fi)
 
+		KPATCH_PRINTK("[fib_create_info]: 4 create error err is %d\n",err);
 		if (cfg->fc_mp)
 			err = fib_get_nhs(fi, cfg->fc_mp, cfg->fc_mp_len, cfg,
 					  extack);
 		else
 			err = fib_nh_init(net, fi->fib_nh, cfg, 1, extack);
+		KPATCH_PRINTK("[fib_create_info]: 5 create error err is %d\n",err);
 	}
 
 	if (err != 0)
 		goto failure;
+	KPATCH_PRINTK("[fib_create_info]: 6 create error err is %d\n",err);
 
 	if (fib_props[cfg->fc_type].error) {
 		if (cfg->fc_gw_family || cfg->fc_oif || cfg->fc_mp) {
@@ -1479,6 +1487,7 @@ struct fib_info *fib_create_info(struct fib_config *cfg,
 			goto err_inval;
 		}
 	}
+	KPATCH_PRINTK("[fib_create_info]: 7 create error err is %d\n",err);
 
 	if (cfg->fc_scope > RT_SCOPE_HOST) {
 		NL_SET_ERR_MSG(extack, "Invalid scope");
@@ -1523,6 +1532,7 @@ struct fib_info *fib_create_info(struct fib_config *cfg,
 		if (linkdown == fi->fib_nhs)
 			fi->fib_flags |= RTNH_F_LINKDOWN;
 	}
+	KPATCH_PRINTK("[fib_create_info]: 8 create error err is %d\n",err);
 
 	if (fi->fib_prefsrc && !fib_valid_prefsrc(cfg, fi->fib_prefsrc)) {
 		NL_SET_ERR_MSG(extack, "Invalid prefsrc address");
@@ -1536,6 +1546,7 @@ struct fib_info *fib_create_info(struct fib_config *cfg,
 			if (nexthop_nh->fib_nh_gw_family == AF_INET6)
 				fi->fib_nh_is_v6 = true;
 		} endfor_nexthops(fi)
+		KPATCH_PRINTK("[fib_create_info]: 9 create error err is %d\n",err);
 
 		fib_rebalance(fi);
 	}
@@ -1548,6 +1559,7 @@ struct fib_info *fib_create_info(struct fib_config *cfg,
 		refcount_inc(&ofi->fib_treeref);
 		return ofi;
 	}
+	KPATCH_PRINTK("[fib_create_info]: 10 create error err is %d\n",err);
 
 	refcount_set(&fi->fib_treeref, 1);
 	refcount_set(&fi->fib_clntref, 1);
@@ -1575,6 +1587,7 @@ struct fib_info *fib_create_info(struct fib_config *cfg,
 		} endfor_nexthops(fi)
 	}
 	spin_unlock_bh(&fib_info_lock);
+	KPATCH_PRINTK("[fib_create_info]: 11 create error err is %d\n",err);
 	return fi;
 
 err_inval:
@@ -1585,6 +1598,7 @@ struct fib_info *fib_create_info(struct fib_config *cfg,
 		fi->fib_dead = 1;
 		free_fib_info(fi);
 	}
+	KPATCH_PRINTK("[fib_create_info]: 12 create error err is %d\n",err);
 
 	return ERR_PTR(err);
 }
diff --git a/net/ipv4/fib_trie.c b/net/ipv4/fib_trie.c
index 8060524f4256..2142824b80f9 100644
--- a/net/ipv4/fib_trie.c
+++ b/net/ipv4/fib_trie.c
@@ -1200,6 +1200,7 @@ static void fib_remove_alias(struct trie *t, struct key_vector *tp,
 			     struct key_vector *l, struct fib_alias *old);
 
 /* Caller must hold RTNL. */
+#include "kpatch-macros.h"
 int fib_table_insert(struct net *net, struct fib_table *tb,
 		     struct fib_config *cfg, struct netlink_ext_ack *extack)
 {
@@ -1221,11 +1222,14 @@ int fib_table_insert(struct net *net, struct fib_table *tb,
 
 	pr_debug("Insert table=%u %08x/%d\n", tb->tb_id, key, plen);
 
+	KPATCH_PRINTK("[fib_table_insert]: start\n");
 	fi = fib_create_info(cfg, extack);
 	if (IS_ERR(fi)) {
 		err = PTR_ERR(fi);
+		KPATCH_PRINTK("[fib_table_insert]: create error err is %d\n",err);
 		goto err;
 	}
+	KPATCH_PRINTK("[fib_table_insert]: cross\n");
 
 	l = fib_find_node(t, &tp, key);
 	fa = l ? fib_find_alias(&l->leaf, slen, tos, fi->fib_priority,
